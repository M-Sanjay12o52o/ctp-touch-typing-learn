// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Lesson {
  id        Int        @id @default(autoincrement())
  title     String     @unique
  exercises Exercise[]
  Progress  Progress[]
}

model Exercise {
  id            Int        @id @default(autoincrement())
  exerciseIndex Int
  content       String
  lessonId      Int
  lesson        Lesson     @relation(fields: [lessonId], references: [id])
  Progress      Progress[]

  @@unique([lessonId, exerciseIndex])
}

model User {
  id       String @id @default(uuid())
  username String @unique
  email    String @unique
  password String

  certificate Certificate?

  progress          Progress[]
  TypingTestResult  TypingTestResult[]
  TypingCertificate TypingTestCertificate[]
}

model Progress {
  id               Int      @id @default(autoincrement())
  userId           String
  lessonId         Int
  exerciseId       Int
  completed        Boolean  @default(false)
  speed            Boolean?
  accuracy         Boolean? // checking whether there were any typo
  lessThenTwoTypos Boolean?
  timestamp        DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id])
  lesson   Lesson   @relation(fields: [lessonId], references: [id])
  exercise Exercise @relation(fields: [exerciseId], references: [id])

  @@unique([userId, lessonId, exerciseId])
}

model TypingTestResult {
  id        Int      @id @default(autoincrement())
  userId    String
  wpm       Int
  accuracy  Float
  timestamp DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Certificate {
  id          String       @id @default(uuid())
  title       String
  issuedDate  DateTime     @default(now())
  userId      String       @unique
  isPaid      Boolean      @default(false)
  isCompleted Boolean      @default(false)
  user        User         @relation(fields: [userId], references: [id])
  transaction Transaction?
}

enum TypingLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
  EXPERT
}

model TypingTestCertificate {
  id         String      @id @default(uuid())
  userId     String
  wpm        Int
  accuracy   Float
  level      TypingLevel
  issuedDate DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  user       User        @relation(fields: [userId], references: [id])
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}

model Transaction {
  id            String            @id @default(uuid())
  amount        Int
  status        TransactionStatus
  date          DateTime          @default(now())
  certificateId String            @unique
  certificate   Certificate       @relation(fields: [certificateId], references: [id])
}
